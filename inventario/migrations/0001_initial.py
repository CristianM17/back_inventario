# Generated by Django 4.2.13 on 2024-06-11 19:49

from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primer_nombre', models.CharField(max_length=50, verbose_name='Primer_nombre')),
                ('segundo_nombre', models.CharField(blank=True, max_length=50, verbose_name='Segundo_nombre')),
                ('primer_apellido', models.CharField(max_length=50, verbose_name='Primer_apellido')),
                ('segundo_apellido', models.CharField(max_length=50, verbose_name='Segundo_apellido')),
                ('tipo_identificacion', models.CharField(choices=[('CC', 'Cedula de Ciudadania'), ('CE', 'Cedula de Extranjeria'), ('PPT', 'Permiso por Protección Personal'), ('NIT', 'Nit'), ('PS', 'Pasaporte')], help_text='Tipo de documento del cliente', max_length=50, verbose_name='Tipo_identificación')),
                ('numero_identificacion', models.BigIntegerField(help_text='Agregar el numero de identificacion del cliente sin puntos', unique=True, verbose_name='Numero_identificacion')),
                ('direccion', models.CharField(help_text='Dirección donde se encuentra el cliente', max_length=255, verbose_name='Direccion')),
                ('ciudad_residencia', models.CharField(help_text='Ciudad donde se encuentra el cliente', max_length=255, verbose_name='Ciudad_residencia')),
                ('numero_celular', models.BigIntegerField(help_text='Numero de contacto del cliente', unique=True, verbose_name='Telefono')),
                ('correo', models.EmailField(help_text='Correo electronico de contacto del cliente', max_length=254, unique=True, verbose_name='Correo_electronico')),
            ],
            options={
                'verbose_name_plural': 'Clientes',
                'db_table': 'cliente',
                'db_table_comment': 'Tabla con informacion de los clientes',
                'ordering': ['primer_nombre'],
            },
        ),
        migrations.CreateModel(
            name='Fabricante',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('razon_social', models.CharField(help_text='Agregar el nombre de la empresa', max_length=60, unique=True, verbose_name='Razon_social')),
                ('nit', models.PositiveIntegerField(help_text='Agregar el nit de la empresa sin el codigo de verificacion y sin puntos', unique=True, verbose_name='NIT')),
                ('direccion', models.CharField(help_text='Dirección donde se encuentra la empresa', max_length=255, verbose_name='Direccion')),
                ('pais', models.CharField(help_text='Pais donde se encuentra la empresa', max_length=60, verbose_name='Pais')),
                ('ubicacion', models.CharField(help_text='Hace referencia en que ciudad se encuentra la empresa', max_length=60, verbose_name='Ubicacion')),
                ('telefono', models.BigIntegerField(help_text='Numero de contacto a la que se puede llamar a la empresa', unique=True, verbose_name='Telefono')),
                ('correo', models.EmailField(help_text='Correo electronico de contacto del fabricante', max_length=254, unique=True, verbose_name='Correo_electronico')),
                ('pagina_web', models.URLField(blank=True, help_text='Pagina web de la empresa', null=True, unique=True, verbose_name='Pagina_web')),
            ],
            options={
                'verbose_name_plural': 'Fabricantes',
                'db_table': 'fabricante',
                'db_table_comment': 'Tabla donde iran los datos de un fabricante',
                'ordering': ['razon_social'],
            },
        ),
        migrations.CreateModel(
            name='Orden',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_creacion_orden', models.DateTimeField(auto_now_add=True, verbose_name='Fecha_creación_orden')),
                ('direccion_entrega', models.CharField(help_text='Dirección donde se entrega la orden', max_length=255, verbose_name='Direccion_entrega')),
                ('total', models.DecimalField(decimal_places=2, help_text='Precio Total de la orden', max_digits=30, verbose_name='total_orden')),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cliente_orden', to='inventario.cliente')),
            ],
            options={
                'verbose_name_plural': 'Ordenes',
                'db_table': 'orden',
                'db_table_comment': 'Tabla con informacion de las ordenes',
                'ordering': ['fecha_creacion_orden'],
            },
        ),
        migrations.CreateModel(
            name='Producto',
            fields=[
                ('sku', models.CharField(help_text='codigo de identificación unica para el producto', max_length=255, primary_key=True, serialize=False, verbose_name='SKU')),
                ('nombre', models.CharField(help_text='nombre que tiene el producto', max_length=255, unique=True, verbose_name='Nombre')),
                ('imagen', models.ImageField(blank='', default='', help_text='Imagen del producto', upload_to='imgProductos/', verbose_name='Imagen_producto')),
                ('descripcion', models.TextField(help_text='Descripcion que pueda tener el producto que se vean relevantes', verbose_name='Descripcion')),
                ('precio', models.DecimalField(decimal_places=2, help_text='precio unitario del producto, la moneda que se maneja por defecto es el peso colombiano', max_digits=15, verbose_name='precio')),
                ('stock_actual', models.IntegerField(default=0, help_text='Cantidad actual del prodcuto', verbose_name='Stock_actual')),
                ('categoria', models.CharField(choices=[('CEL', 'Celulares'), ('PC', 'computadores'), ('ELEC', 'Electrodomésticos'), ('ALIM', 'Alimentos'), ('ACC', 'Accesorios'), ('VID', 'Videojuegos'), ('AUD', 'Audio'), ('CAM', 'Cámaras'), ('HOG', 'Hogar'), ('DEP', 'Deportes'), ('JUG', 'Juguetes'), ('OT', 'Otros')], help_text='Categorias en las que pertenecen los productos', max_length=4, verbose_name='Categorias')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha_creación')),
                ('fecha_actualizacion_stock', models.DateTimeField(auto_now=True, verbose_name='Fecha_actualización')),
                ('is_active', models.BooleanField(default=True, help_text='Determina si el producto esta activo para vender')),
                ('fabricante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='producto_fabricante', to='inventario.fabricante')),
            ],
            options={
                'verbose_name_plural': 'Productos',
                'db_table': 'producto',
                'db_table_comment': 'Tabla donde iran los productos',
                'order_with_respect_to': 'fabricante_id',
            },
        ),
        migrations.CreateModel(
            name='Seguimiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.PositiveIntegerField(verbose_name='Estado')),
                ('fecha_actualizacion_estado', models.DateTimeField(auto_now=True, verbose_name='fecha_actualizacion_estado')),
                ('orden', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventario.orden')),
            ],
            options={
                'verbose_name_plural': 'Seguimientos',
                'db_table': 'seguimiento',
                'db_table_comment': 'Tabla con el seguimiento de los productos',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='SalidaProducto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.PositiveIntegerField(verbose_name='Cantidad')),
                ('fecha_salida', models.DateTimeField(auto_now=True, verbose_name='Fecha_salida')),
                ('orden', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salidas_producto', to='inventario.orden')),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salidas_producto', to='inventario.producto')),
            ],
            options={
                'verbose_name_plural': 'Salida_productos',
                'db_table': 'salida_producto',
                'db_table_comment': 'Tabla con los productos que salieron del stock',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='OrdenProducto',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('cantidad', models.PositiveIntegerField(verbose_name='Cantidad')),
                ('precio_unitario', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Precio_unitario')),
                ('orden', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventario.orden')),
                ('producto_sku', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventario.producto')),
            ],
            options={
                'verbose_name_plural': 'Ordenes_productos',
                'db_table': 'orden_producto',
                'db_table_comment': 'Tabla con informacion de detallada de la orden',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='orden',
            name='orden_producto',
            field=models.ManyToManyField(related_name='orden_producto', through='inventario.OrdenProducto', to='inventario.producto'),
        ),
        migrations.CreateModel(
            name='IngresoProducto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.PositiveIntegerField(verbose_name='Cantidad')),
                ('fecha_ingreso', models.DateTimeField(auto_now=True, verbose_name='Fecha_ingreso')),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingresos_producto', to='inventario.producto')),
            ],
            options={
                'verbose_name_plural': 'Ingreso_productos',
                'db_table': 'ingreso_producto',
                'db_table_comment': 'Tabla con los ingresos de productos al stock',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='DevolucionProducto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.PositiveIntegerField(verbose_name='Cantidad')),
                ('fecha_devolucion', models.DateTimeField(auto_now=True, verbose_name='Fecha_devolucion')),
                ('motivo_devolucion', models.CharField(help_text='Motivo por el cual se realiza la devolución', max_length=255, verbose_name='motivo_devolucion')),
                ('orden', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devoluciones_producto', to='inventario.orden')),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devoluciones_producto', to='inventario.producto')),
            ],
            options={
                'verbose_name_plural': 'Devoluciones_productos',
                'db_table': 'devolucion_producto',
                'db_table_comment': 'Tabla con los productos devueltos',
                'ordering': ['id'],
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='salidaproducto',
            trigger=pgtrigger.compiler.Trigger(name='actualizar_stock_salida_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n                    BEGIN\n                        UPDATE producto\n                        SET stock_actual = stock_actual - NEW.cantidad\n                        WHERE sku = NEW.producto_id;\n                        RETURN NEW;\n                    END;\n                ', hash='f3fd9e6d99250c6c99d059513a1b3edf9b7b9a49', operation='INSERT', pgid='pgtrigger_actualizar_stock_salida_insert_0b5ab', table='salida_producto', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='salidaproducto',
            trigger=pgtrigger.compiler.Trigger(name='actualizar_stock_ingresos_update', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n                BEGIN\n                        UPDATE producto\n                        SET stock_actual = \n                            CASE\n                                WHEN NEW.cantidad > OLD.cantidad THEN stock_actual - (NEW.cantidad - OLD.cantidad)\n                                WHEN NEW.cantidad < OLD.cantidad THEN stock_actual + (OLD.cantidad - NEW.cantidad)\n                                ELSE 0\n                            END\n                        WHERE sku = NEW.producto_id;\n                        RETURN NEW;\n                    END;\n                ', hash='6199b4aa0c1fcd76bce1529c92256f28b85dc2c2', operation='UPDATE', pgid='pgtrigger_actualizar_stock_ingresos_update_b0368', table='salida_producto', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='ingresoproducto',
            trigger=pgtrigger.compiler.Trigger(name='actualizar_stock_ingresos_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n                    BEGIN\n                        UPDATE producto\n                        SET stock_actual = stock_actual + NEW.cantidad\n                        WHERE sku = NEW.producto_id;\n                        RETURN NEW;\n                    END;\n                ', hash='302616d83c30a33d496e0ac76e59dfc89b8c9e99', operation='INSERT', pgid='pgtrigger_actualizar_stock_ingresos_insert_d4803', table='ingreso_producto', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='ingresoproducto',
            trigger=pgtrigger.compiler.Trigger(name='actualizar_stock_ingresos_update', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n                BEGIN\n                        UPDATE producto\n                        SET stock_actual = stock_actual + \n                            CASE\n                                WHEN NEW.cantidad > OLD.cantidad THEN NEW.cantidad - OLD.cantidad\n                                WHEN NEW.cantidad < OLD.cantidad THEN NEW.cantidad - OLD.cantidad\n                                ELSE 0\n                            END\n                        WHERE sku = NEW.producto_id;\n                        RETURN NEW;\n                    END;\n                ', hash='a413e7f5c0cdb403eb2fa15ba08f112bf7135ecd', operation='UPDATE', pgid='pgtrigger_actualizar_stock_ingresos_update_1146a', table='ingreso_producto', when='AFTER')),
        ),
    ]
